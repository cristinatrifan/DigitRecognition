type: edu
custom_name: stage2
files:
- name: test/DigitRecognitionTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import recognition.Main;

    import java.util.List;

    class Clue {
        String answer;
        Clue(int ans) {
            answer = Integer.toString(ans);
        }
    }

    public class DigitRecognitionTest extends StageTest<Clue> {
        public DigitRecognitionTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setAttach(new Clue(1))
                    .setInput(
                        "_X_\n" +
                        "_X_\n" +
                        "XX_\n" +
                        "XX_\n" +
                        "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(2))
                    .setInput(
                        "XX_\n" +
                        "__X\n" +
                        "__X\n" +
                        "X__\n" +
                        "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(7))
                    .setInput(
                        "XXX\n" +
                        "X_X\n" +
                        "__X\n" +
                        "__X\n" +
                        "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(9))
                    .setInput(
                        "XXX\n" +
                        "X_X\n" +
                        "XXX\n" +
                        "__X\n" +
                        "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(0))
                    .setInput(
                        "XXX\n" +
                        "X_X\n" +
                        "X_X\n" +
                        "X_X\n" +
                        "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(3))
                    .setInput(
                        "XXX\n" +
                        "__X\n" +
                        "XXX\n" +
                        "__X\n" +
                        "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(4))
                    .setInput(
                        "X_X\n" +
                        "__X\n" +
                        "XXX\n" +
                        "__X\n" +
                        "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(5))
                    .setInput(
                        "XXX\n" +
                        "X__\n" +
                        "XXX\n" +
                        "__X\n" +
                        "XX_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(8))
                    .setInput(
                        "XXX\n" +
                        "X_X\n" +
                        "XXX\n" +
                        "X_X\n" +
                        "XX_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(6))
                    .setInput(
                        "_XX\n" +
                        "X__\n" +
                        "XXX\n" +
                        "X_X\n" +
                        "XXX\n"),




                new TestCase<Clue>()
                    .setAttach(new Clue(0))
                    .setInput(
                        "XXX\n" +
                        "X_X\n" +
                        "X_X\n" +
                        "X_X\n" +
                        "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(1))
                    .setInput(
                        "_X_\n" +
                        "_X_\n" +
                        "_X_\n" +
                        "_X_\n" +
                        "_X_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(2))
                    .setInput(
                        "XXX\n" +
                        "__X\n" +
                        "XXX\n" +
                        "X__\n" +
                        "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(3))
                    .setInput(
                        "XXX\n" +
                        "__X\n" +
                        "XXX\n" +
                        "__X\n" +
                        "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(4))
                    .setInput(
                        "X_X\n" +
                        "X_X\n" +
                        "XXX\n" +
                        "__X\n" +
                        "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(5))
                    .setInput(
                        "XXX\n" +
                        "X__\n" +
                        "XXX\n" +
                        "__X\n" +
                        "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(6))
                    .setInput(
                        "XXX\n" +
                        "X__\n" +
                        "XXX\n" +
                        "X_X\n" +
                        "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(7))
                    .setInput(
                        "XXX\n" +
                        "__X\n" +
                        "__X\n" +
                        "__X\n" +
                        "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(8))
                    .setInput(
                        "XXX\n" +
                        "X_X\n" +
                        "XXX\n" +
                        "X_X\n" +
                        "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(9))
                    .setInput(
                        "XXX\n" +
                        "X_X\n" +
                        "XXX\n" +
                        "__X\n" +
                        "XXX\n")

                );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            boolean contains = reply.contains(clue.answer);
            if (!contains) {
                return CheckResult.wrong("");
            }
            for (int i = 0; i < 10; i++) {
                String num = Integer.toString(i);
                if (!num.equals(clue.answer) && reply.contains(num)) {
                    return new CheckResult(false,
                        "Along with the right answer, " +
                            "number " + i + " was found in the output");
                }
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/recognition/Main.java
  visible: true
  text: |
    package recognition;
    import java.util.*;

    public class Main {
        public static void main(String[] args) {
           Main obj = new Main();

           //create an immutable map with the weights values
           Main.createWeights();

            System.out.println("Input grid: ");
           //get the state of cells an map them in an Array with values 0 or 1
           //calculate output based on weights and cells values
           obj.calcOutput(getListWeights(), obj.interpretCellvalues());

        }

        public static List<Integer> getListWeights() {
            return listWeights;
        }

        public static void setListWeights(List<Integer> listWeights) {
            Main.listWeights = listWeights;
        }

        private static List<Integer> listWeights;

        private static void createWeights() {
            List<Integer> listWeights = List.of(
                    2,
                    1,
                    2,
                    4,
                    -4,
                    4,
                    2,
                    -1,
                    2,
                    -5
            );
          setListWeights(listWeights);
        }

        private ArrayList<Integer> interpretCellvalues() {
            Scanner scanner = new Scanner(System.in);
            String str = "";
            ArrayList<Integer> cellValues = new ArrayList<>();

            while (scanner.hasNextLine()){
                str = scanner.nextLine();
                for (int i = 0; i < str.length(); i++) {
                   if (String.valueOf(str.charAt(i)).equals("X")) {
                       cellValues.add(1);
                   } else {
                       cellValues.add(0);
                   }
                }
            }
            return cellValues;
        }

        private void calcOutput(List<Integer> listWeighs,
                                ArrayList<Integer> cellValues) {

            int output = 0;
            int index = 0 ;

            while (index < 9) {
                output += listWeighs.get(index) * cellValues.get(index);
                index++;
            }
            output += listWeighs.get(9);

            int out = (output > 0)
                    ? 0
                    : 1;

            System.out.println("This number is " + out);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/51/stages/278/implement
status: Solved
record: 2
